{"version":3,"sources":["components/Header.jsx","components/ApiServices.jsx","components/Dashboard.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","Component","ApiServices","props","getNycComplaints","a","axios","get","res","data","length","setState","apidata","console","log","renderDataByLocation","location","list","state","map","item","boro_nm","push","className","law_cat_cd","ofns_desc","pd_desc","prem_typ_desc","vic_race","queens","brooklyn","bronx","statenIsland","this","queensData","brooklynData","bronxData","Dashboard","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2PAEqBA,E,uKAEjB,OACE,6BACE,sDACA,+M,GAL4BC,a,yCCUfC,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAgBRC,iBAjBmB,sBAiBA,4BAAAC,EAAA,+EAEGC,IAAMC,IAAN,yDAFH,QAETC,EAFS,QAIRC,MAAQD,EAAIC,KAAKC,OAAS,GAC/B,EAAKC,SAAS,CAACC,QAASJ,IALX,gDAQfK,QAAQC,IAAI,kCAAZ,MARe,yDAjBA,EA6BnBC,qBAAuB,SAACC,GACxB,IAAIC,EAAO,GAmBT,OAlBG,EAAKC,MAAMN,QAAQH,MAAQ,EAAKS,MAAMN,QAAQH,KAAKC,OAAS,IAC7DG,QAAQC,IAAI,UAAU,EAAKI,MAAMN,QAAQH,MACzC,EAAKS,MAAMN,QAAQH,KAAKU,KAAI,SAAAC,GAC1B,GAAGA,EAAKC,UAAYL,EAElB,OADAH,QAAQC,IAAI,0BAA2BM,GAC/BH,EAAKK,KACb,yBAAKC,UAAU,kBACb,2BAAIH,EAAKC,QAAT,KACA,2BAAID,EAAKI,WAAT,KACA,2BAAIJ,EAAKK,UAAT,KACA,2BAAIL,EAAKM,QAAT,KACA,2BAAIN,EAAKO,cAAT,KACA,2BAAIP,EAAKQ,SAAT,WAMDX,GA9CP,EAAKC,MAAQ,CACXN,QAAS,GACTiB,OAAQ,GACRC,SAAU,GACVC,MAAO,GACPC,aAAc,IARC,E,gEAajBC,KAAK7B,qB,+BAwCL,IAAI8B,EAAaD,KAAKlB,qBAAqB,UACvCoB,EAAeF,KAAKlB,qBAAqB,YACzCqB,EAAYH,KAAKlB,qBAAqB,SAK1C,OACE,6BACE,yCACA,4BACE,gCAAMoB,EAAN,MAGF,wCACA,4BACE,gCAAMD,EAAN,MAEF,uCACA,4BACE,gCAAME,EAAN,W,GA1E+BnC,aCTpBoC,E,uKAGjB,OACE,6BACE,kBAAC,EAAD,W,GAL+BpC,aCWxBqC,MATf,WACE,OACE,yBAAKf,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcgB,QACW,cAA7BC,OAAOxB,SAASyB,UAEe,UAA7BD,OAAOxB,SAASyB,UAEhBD,OAAOxB,SAASyB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,a","file":"static/js/main.141a3628.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class Header extends Component {\n  render() {\n    return (\n      <div>\n        <h1> NYC Crime Complaints </h1>\n        <h4>This dataset includes all valid felony, misdemeanor, and violation crimes reported to the New York City Police Department (NYPD) from 2006 to the end of last year (2019).</h4>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport '../App.css'\nimport axios from 'axios';\n// import Brooklyn from './Brooklyn';\n\n\n// law_cat_cd\n// ofns_desc\n// pd_desc\n// prem_typ_desc\n// vic_race\n\nexport default class ApiServices extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      apidata: [],\n      queens: [],\n      brooklyn: [],\n      bronx: [],\n      statenIsland: []\n    }\n  }\n\n  componentDidMount() {\n    this.getNycComplaints();\n  }\n\n\n  getNycComplaints = async() => {\n    try {\n      const res = await axios.get(`https://data.cityofnewyork.us/resource/qgea-i56i.json`)\n\n      if(res.data && res.data.length > 0 ){\n        this.setState({apidata: res})\n      };\n    } catch(e) {\n      console.log('nyc complaint history error => ', e)\n    }\n  }\n\n  renderDataByLocation = (location) => {\n  let list = [];\n    if(this.state.apidata.data && this.state.apidata.data.length > 0) {\n      console.log(\"im hurr\",this.state.apidata.data)\n      this.state.apidata.data.map(item => {\n        if(item.boro_nm === location) {\n          console.log(\"render data queens only\", item)\n          return (list.push(\n          <div className=\"item-container\"> \n            <p>{item.boro_nm} </p>\n            <p>{item.law_cat_cd} </p>\n            <p>{item.ofns_desc} </p>\n            <p>{item.pd_desc} </p>\n            <p>{item.prem_typ_desc} </p>\n            <p>{item.vic_race} </p>\n          </div>\n          )\n      ) }\n      })\n    }\n    return list;\n  }\n\n  render() {\n    let queensData = this.renderDataByLocation('QUEENS');\n    let brooklynData = this.renderDataByLocation('BROOKLYN');\n    let bronxData = this.renderDataByLocation(\"BRONX\");\n    \n\n\n\n    return (\n      <div>\n        <h2> Brooklyn</h2>\n        <ul>\n          <li> {brooklynData} </li>\n        </ul>\n\n        <h2> Queens </h2>\n        <ul>\n          <li> {queensData} </li>\n        </ul>\n        <h2> Bronx </h2>\n        <ul>\n          <li> {bronxData} </li>\n        </ul>\n      </div>\n    )\n  }\n}\n\n","import React, { Component } from 'react'\nimport ApiServices from './ApiServices';\n\nexport default class Dashboard extends Component {\n\n  render() {\n    return (\n      <div>\n        <ApiServices />\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport Header from './components/Header.jsx';\nimport Dashboard from './components/Dashboard.jsx';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}